// React and Redux Const
const { Component } = React;
const { render } = ReactDOM;
const { Provider, connect } = ReactRedux;
const { applyMiddleware, createStore, compose, combineReducers, bindActionCreators } = Redux;

//Locale Storage
//const { localStorage } = windows;

/*
name used for local storage, since well, its 
codepen and other people will be creating
recipe apps, and don't want to break them 
*/
const STORE_PREFIX = '_jnmorse';

// Redux Action Types
const ADD_RECIPE = 'ADD_RECIPE';
const REMOVE_RECIPE = 'REMOVE_RECIPE';
const STORE_RECIPES = 'STORE_RECIPE';
const RETRIEVE_RECIPES = 'RETRIEVE_RECIPES';
const SEARCH_RECIPES = 'SEARCH_RECIPES';

const addRecipe = (recipe, index) => {
  const {name, directions, ingredients } = recipe;
  
  return {
    type: ADD_RECIPE,
    payload: {
      recipe: { name, directions, ingredients },
      index: index
    }
  };
};

const removeRecipe = (id) => {
  return {
    type: REMOVE_RECIPE,
    payload: id
  };
};

const retrieveRecipes = () => {
  let data = JSON.parse(localStorage.getItem(`${STORE_PREFIX}_recipes`));
  
  if (!data) {
    data = [
      {
        name: 'Sausage Chowder',
        ingredients: [
          '1 pound bulk pork sausage',
          '5 potatoes, peeled and cubed',
          '1 (15 ounce) can cream-style corn',
          '1 (15 ounce) can whole kernal corn',
          '1/2 onion, diced',
          '1 cup uncooked macaroni (optional)',
          '8 ounces processed cheese food, cubed',
          'salt and pepper to taste'
        ],
        directions: [
          'Cumble the sausage into a dutch oven our soup pot over medium-high heat. Cook until evenly browned, stirring and breaking into smaller chunks. Drain grease. Add onion; cook and stir until onion is beginning to soften.',
          'Put in the potatoes, and fill with enough water to cover. Bring to a boil, and stir in the macaroni. Pour in the cans of creamed corn, and whole corn with the juice from the can.',
          'When the pasta and potatoes are tender, remove from heat and stir in the processed cheese until melted. Season with salt and pepper to taste. If the chowder is too thick, stir in milk or water to thin before serving.'
        ]
      },
      {
      name: 'Mushroom Slow Cooker Roast Beef',
      ingredients: [
        '1 pound sliced fresh mushrooms',
        '1 (4 pound) standing beef rib roast',
        '1 (1.25 ounce) envelope onion soup mix',
        '1 (12 fluid ounce) bottle beer',
        'ground black pepper'
      ],
        directions: [
          'Place the mushrooms in the bottom of a slow cooker;',
          'set the roast atop the mushrooms;',
          'sprinkle the onion soup mix over the beef',
          'pour the beer over everything',
          'season with black pepper',
          'Set slow cooker to low',
          'Cook 9 - 10 hours until the meat is easily pulled apart with a fork'
        ]
      },
      {
        name: 'Vanishing Oatmeal Raisin Cookies',
        ingredients: [
          '1/2 Cup (1 Stick) plus 6 tablespoons butter, softened',
          '3/4 Cup firmly packed brown sugar',
          '1/2 Cup granulated sugar',
          '2 Eggs',
          '1 Teaspoon vanilla',
          '1-1/2 Cups all-purpose flour',
          '1 Teaspoon Baking Soda',
          '1 Teaspoon ground cinnamon',
          '1/2 Teaspoon salt (optional)',
          '3 Cups Quaker Oats (quick or old fashioned, uncooked)',
          '1 Cup raisins'
        ],
        directions: [
          'Heat Oven to 350 deg fahrenheit',
          'In a large bowl, beat butter and sugars on medium speed of electric mixer until creamy',
          'Add eggs and vanilla, beat well',
          'Add combined flour, baking soda, cinnamon, and salt, mix well',
          'Add oats and raisins, mix well',
          'Drop dough by rounded tablespoonfuls onto ungreased cookie sheets',
          'Bake 8 to 10 minutes or until light golden brown'
        ]
      }
    ]
  }
  
  return {
    type: RETRIEVE_RECIPES,
    payload: data
  };
};

const storeRecipes = (data) => {
  localStorage.setItem(`${STORE_PREFIX}_recipes`, JSON.stringify(data));
  
  return {
    type: STORE_RECIPES
  };
};

const searchRecipes = (term) => {
  return {
    type: SEARCH_RECIPES,
    payload: term
  }
};

class RecipeBook extends Component {
  constructor(props) {
    super(props);
    
    this.state = {
      newRecipeToggle: false
    };
  }
  
  componentWillMount () {
    this.props.retrieveRecipes();
  }
  
  componentDidUpdate(prevProps, prevState) {
    const { cards } = this.props.recipe;
    
    if (cards !== prevProps.recipe.cards) {
      this.props.storeRecipes(cards);
    }
  }
  
  showNewRecipe () {
    this.setState({
      newRecipeToggle: !this.state.newRecipeToggle
    });
  }
  
  render () {
    const { cards } = this.props.recipe;
    
    return (
      <div className="recipe-book">
        <header className="recipe-book-title">
          <h1>Recipe Book</h1>
        </header>
        
        <div className="recipe-top-controls">
          <SearchRecipes />
          <button type="button" onClick={() => this.showNewRecipe()}>Add Recipe</button>
        </div>
        
        <div>
          {this.state.newRecipeToggle ? <EditRecipe callback={() => this.showNewRecipe()} /> : null}
        </div>
        
        <RecipeList {...this.props} />
        </div>
    );
  }
}

function mapStateToProps({ recipe }) {
  return { recipe };
}

RecipeBook = connect(mapStateToProps, {
  storeRecipes,
  retrieveRecipes
})(RecipeBook);

class EditRecipe extends Component {
  constructor (props) {
    super(props);
    
    this.state = {
      name: '',
      ingredient: '',
      step: '',
      ingredients: [],
      directions: []
    }
  }
  
  updateIngredient (value) {
    this.setState({
      ingredient: value
    });
  }
  
  updateStep (value) {
    this.setState({
      step: value
    });
  }
  
  addStep () {
    document.querySelector('#recipe-step').value = '';
    
    this.setState({
      directions: [...this.state.directions, this.state.step],
      step: ''
    });
  }
  
  addIngredient () {
    document.querySelector('#ingredient').value = '';
    
    this.setState({
      ingredients: [...this.state.ingredients, this.state.ingredient],
      ingredient: ''
    });
  }
  
  updateName (value) {
    this.setState({
      name: value
    });
  }
  
  onFormSubmit (event) {
    event.preventDefault();
    
    const { name, directions, ingredients } = this.state;
    
    if (name && directions.length && ingredients.length) {
      this.props.addRecipe(this.state, this.props.index);
      this.props.callback();
    }
  }
  
  hide (event) {
    if (event.target === document.querySelector('.recipe-edit')) {
      this.props.callback(event);
    }
  }
  
  deleteStep(event, i) {
    event.preventDefault();
    let directions = [...this.state.directions];
    directions.splice(i, 1);
    
    this.setState({ directions });
  }
  
  deleteIngredient(event, i) {
    event.preventDefault();
    let ingredients = [...this.state.ingredients];
    ingredients.splice(i, 1);
    
    this.setState({ ingredients });
  }
  
  componentWillMount() {
    const {name, ingredients, directions} = this.props;
    
    if (name && ingredients && directions) {
      this.setState({ name, ingredients, directions });
    }
  }
  
  render () {
    const ingredients = this.state.ingredients.map((ingredient, i) => {
      return (
      <li key={i}>
          <span>{ingredient}&nbsp; </span>
          <a href onClick={(event) => this.deleteIngredient(event, i)}>X</a>
          <span>&nbsp; </span>
          </li>
    );
    });
    
    const directions = this.state.directions.map((step, i) => {
      return (
      <li key={i}>
          <p>{step} <a href onClick={(event) => this.deleteStep(event, i)}>X</a></p>
          </li>
      );
    });
  
    return (
      <div className="recipe-edit" onClick={(event) => this.hide(event)}>
        <form onSubmit={(event) => this.onFormSubmit(event)}>
          <header style={{display:'none'}}><h1>New Recipe</h1></header>
          
          <div>
            <label htmlFor="recipe-name">Name</label>
            <input
              type="text"
              id="recipe-name"
              placeholder="Recipe Name"
              value={this.state.name}
              onChange={(event)=>this.updateName(event.target.value)}
              />
          </div>
          
          <fieldset>
            <legend>Ingredients</legend>
            
            <ul className="ingredients">
              {ingredients}
            </ul>
            
            <label htmlFor="ingredient">Ingredient</label>
            
            <input
              type="text"
              id="ingredient"
              placeholder="ingredient"
              value={this.state.ingredient}
              onChange={(event) => this.updateIngredient(event.target.value)}
              />
            
            <button type="button" onClick={() => this.addIngredient()}>Add Ingredient</button>
          </fieldset>
          
          <fieldset>
            <legend>Directions:</legend>
            
            <ul>
              {this.state.directions.length ? directions : <li>No Directions</li>}
            </ul>
            
            <hr />
            
            <label htmlFor="recipe-step">Step</label>
            
            <textarea
              id="recipe-step"
              placeholder="preheat over to 350"
              value={this.state.step}
              onChange={(event) => this.updateStep(event.target.value)}
              />
            
            <button type="button" onClick={()=>this.addStep()}>Add Direction Step</button>
          </fieldset>
          
          <footer>
            <button type="submit">Save Recipe</button>
            <button type="button" onClick={(event)=>this.props.callback(event)}>Cancel</button>
          </footer>
        </form>
        </div>
    );
  }
}

EditRecipe = connect(null, {addRecipe})(EditRecipe);

class SearchRecipes extends Component {
  constructor (props) {
    super(props);
    
    this.state = {
      term: ''
    }
    
    this.search = _.debounce(this.props.searchRecipes, 500);
  }
  
  updateTerm(term) {
    this.setState({
      term: term
    });
    
    this.search(term);
  }
  
  render () {
    return (
    <input 
      className="recipe-search-box"
      type="text"
      value={ this.state.term }
      placeholder="Search Recipes"
      onChange={ (event) => this.updateTerm(event.target.value) }
      />
     );
  }
}

SearchRecipes = connect(null, {searchRecipes})(SearchRecipes);

const RecipeList = (props) => {
  let { cards, search } = {...props.recipe};
  
  cards = cards
  .sort((a, b) => {
    return a.name > b.name;
  })
  .filter((card) => {
    let name = card.name.toLowerCase();
    search = search.toLowerCase();
    
    const nameMatch = name.search(search) !== -1;
    const ingredentsMatch = card.ingredients.some((item) => {
      item = item.toLowerCase();
      return item.search(search) !== -1;
    });
    
    return nameMatch || ingredentsMatch;
  })
  .map((card, index) => {
    return <Recipe index={index} key={index} {...card} />
  });
  
  return (
    <div>
      {cards}
      </div>
  );
};

class Recipe extends Component {
  constructor (props) {
    super(props);
    
    this.state = {
      edit: false
    };
  }
  
  toggleActive (event, id) {
    event.preventDefault();
    
    let itemToToggle = document.querySelector(`#recipe-${id}`);
    let classList = itemToToggle.classList;
    let active = false;
    let i = 0;
    
    for (i = 0; i < classList.length; i++) {
      if (classList[i] === 'active') {
        active = true;
      }
    }
    
    if (active) {
      classList.remove('active');
    }
    
    else {
      classList.add('active')
    }
  }
  
  toggleEdit (event) {
    if (event) {
      event.preventDefault();
    }
    
    this.setState({
      edit: !this.state.edit
    });
  }
  
  render () {
    const { name, index } = this.props;
    
    let list = (step, i) => {
      return <li key={i}>{step}</li>;
    };
    
    let directions = this.props.directions.map(list);
    let ingredients = this.props.ingredients.map(list);
    
    return (
    <article id={`recipe-${index}`} className="recipe-card">
        {this.state.edit ? <EditRecipe {...this.props} callback={() => this.toggleEdit()} /> : null}
            <header className="recipe-title">
             <h1><a href onClick={(event) => this.toggleActive(event, index)}>{name}</a></h1>
            </header>
            
            <div className="recipe-details">
              <section>
                <header><h2>Ingredients</h2></header>
                <ol>
                  {ingredients}
                </ol>
              </section>
              
              <section>
                <header><h2>Directions</h2></header>
                <ol>
                  {directions}
                </ol>
              </section>
              
              <footer>
                <a
                  href="#"
                  className="button"
                  onClick={(event) => this.toggleEdit(event)}
                  >
                  <span>Edit Recipe</span>
                </a>
                
                <button
                  onClick={() => this.props.removeRecipe(index)}
                  type="button"
                  className="danger"
                  >
                  <span>Delete Recipe</span>
                </button>
              </footer>
            </div>
            </article>
    );
  }
}
        
Recipe = connect(null, {removeRecipe})(Recipe);

const App = () => {
  return (
  <div>
    <RecipeBook />
    </div>
);
};

const RECIPES_INIT_STATE = {
  search: '',
  cards: []
};

const RecipesReducer = (state = RECIPES_INIT_STATE, action) => {
  let cards = [];
  
 switch(action.type) {
     
   case SEARCH_RECIPES:
     return {...state, search: action.payload };
     
   case RETRIEVE_RECIPES:
     return { ...state, cards: action.payload };
     
   case ADD_RECIPE:
     cards = [...state.cards];
     
    if (action.payload.index !== undefined) {
      cards[action.payload.index] = action.payload.recipe;
    }
     
     else {
       cards.push(action.payload.recipe);
     }
     
     return {...state, cards};
     
   case REMOVE_RECIPE:
     cards = [...state.cards];
     cards.splice(action.payload, 1);
     
     return {...state, cards};
     
   default:
     return state
 } 
}

const rootReducer = combineReducers ({
  recipe: RecipesReducer
});

/* simplified React Promise Middleware */
function promiseMiddleware({dispatch}) {
  function isPromise(val) {
    return val && typeof val.then === 'function';
  }
  
  return next => action => {
    return isPromise(action.payload)
    ? action.payload.then(
    result => dispatch({...action, payload: result}),
    error => dispatch({...action, payload: error, error: true })
    )
    : next(action);
  };
}
        
function configureStore(initialState) {
  const store = createStore(rootReducer, initialState, compose(
  applyMiddleware(promiseMiddleware),
    window.devToolsExtension ? window.devToolsExtension() : f => f
  ))
   
  return store
  } 

const store = configureStore()

render(
<Provider store={store}>
  <App />
  </Provider>
  , document.querySelector('#app')
);